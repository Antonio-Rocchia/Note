snippet template::main "main file latex template" b
\RequirePackage[l2tabu, orthodox]{nag}

\documentclass
[10pt,        % Font size(10 default)
 a4paper,     % Paper size and format
 %draft,      % Draft mode will improve compilation time but not render figures
 onecolumn,   % Onecolumn or two columns
 fleqn,       % fleqn=left align of math formulas
 %leqno,      % Math formula counter to the left of the formula(right default)
 twoside,     % When printing, oneside=fronte twoside=fronte-retro
 notitlepage, % Does not reserve a page for the title, titlepage does
 openany      % Open chapter anywhere, openright open on right page
]{$3}    % article, book, report, letter, beamer

%region Preamble

%region Metadata
\title{$2}
\author{$1}
%endregion Metadata

%region Language and encoding settings
\usepackage[utf8]{inputenc}                 % Input encoding for characters written in the .tex document
\usepackage[T1]{fontenc}                    % Output encoding for characters written in the .pdf document
\usepackage[italian, english]{babel}        % Languages used in this file, switch with \selectlanguage{language}, default is italian
%endregion Language and encoding settings

%region Page layout settings
%region Page dimension, margin, header and footer dimensions
\usepackage{geometry}
\geometry{
paper=a4paper,              % Type of paper used
hmargin=2cm,                % Shorthand for left and right margin
bindingoffset=1cm,          % Offset from page binding to the start of the inner margin
top=1cm,                    % Top margin
bottom=0.8cm,               % Bottom margin
includeheadfoot=true,       % Include header and footer in the body size
headsep=1cm,                % Distance from header and main text
headheight=12pt,            % Height of the header
footskip=2cm,               % Distance from the bottom of the foot the end of body
}
%endregion Page dimension, margin, header and footer dimensions

%region Header and footer content
\usepackage{fancyhdr}
\pagestyle{plain}
%endregion Header and footer content

%region Microtype
\usepackage[final,babel=true]{microtype}
%endregion Microtype

%region Parskip
/usepackage{parskip}
%endregion Parskip

%endregion Page layout settings

%region Hyperlinks
\usepackage{hyperref}
\makeatletter
\hypersetup{
colorlinks=true,
linkcolor=blue,
filecolor=magenta,
urlcolor=blue,
pdftitle={\@title},
pdfauthor={\@author}
}
\makeatother
    
\urlstyle{same}
%endregion Hyperlinks

%endregion Preamble

%region modules

%endregion modules

\begin{document}
%region Title and TOC
\microtypesetup{protrusion=false} % disables protrusion locally in the document
\maketitle          
\tableofcontents % prints Table of Contents
\microtypesetup{protrusion=true} % enables protrusion
%endregion Title and TOC

$0

\end{document}
endsnippet
snippet template::subfile "Template for a subfile" bA
\documentclass[../main.tex]{subfiles}

\begin{document}
$0
\end{document}
endsnippet
snippet [chap] "Starts a new chapter" bA
\chapter{$1}
$0

endsnippet

snippet [sec] "Starts a section" bA
\section{$1}
$0

endsnippet

snippet [subsec] "Starts a subsection" bA
\subsection{$1}
$0

endsnippet

snippet [par] "Starts a new paragraph" bA
\paragraph{$1}
$0

endsnippet

snippet [enum] "Ordered list block" bA
\begin{enum}
    \item $0
\end{enum}
endsnippet

snippet [item] "Unordered list block" bA
\begin{itemize}
    \item $0
\end{itemize}
endsnippet
snippet \toc "Adds table of content" b
\tableofcontents
endsnippet

snippet litem "item for lists" bA
\item $0
endsnippet
snippet \it "Enfasi"
\textit{$1}$0
endsnippet
snippet module::subpackage:main "Add support for subpackage module to the main document" bA
\usepackage{subfiles}
endsnippet

snippet module::code "Add code enviroments to preamble" b
%region Code module
\usepackage[dvipsnames]{xcolor} % Used by: listings
\usepackage{listings} % Code display "https://www.ctan.org/pkg/listings"
\lstset{
    backgroundcolor=\color{White},
    basicstyle=\ttfamily,
    identifierstyle=\color{Black},
    stringstyle=\color{Green},
    keywordstyle=\color{NavyBlue},
    commentstyle=\color{Gray},
    extendedchars=true,
    showstringspaces=false,
    % caption
    title=\lstname,
    % frames
    frame=lines,
    breaklines=true,
    postbreak=\mbox{\textcolor{red}{$\hookrightarrow$}\space},
}

\lstnewenvironment{C++}[1][]
	{\lstset{language=C++},#1}
	{}

\lstnewenvironment{C}[1][]
	{\lstset{language=C},#1}
	{}

%region Snippets 
% snippet [C++] "C++ Code block" bA
% \begin{C++}[name=]
% 	
% \end{C++}
% endsnippet

% snippet [C] "C Code block" bA
% \begin{C}[name=]
% 	
% \end{C}
% endsnippet

% snippet code_i "Code Inline" bA
% \lstinline[language=]!"code"!
% endsnippet

% snippet import_code "Import code from a file" bA
% \lstinputlisting[language=,name=]{}
% endsnippet
%endregion Snippets
endsnippet

snippet [C++] "C++ Code block" bA
\begin{C++}[name=$1]
$0
\end{C++}
endsnippet

snippet [C] "C Code block" bA
\begin{C}[name=$1]
$0
\end{C}
endsnippet

snippet code_i "Code Inline" bA
\lstinline[language=$1]!$0!
endsnippet

snippet import_code "Import code from a file" bA
\lstinputlisting[language=$1,name=$2,firstline=$3,lastline=$0]{$4}
endsnippet
%endregion Code module
snippet module::test_text "Adds blindtext command to generate text" bA
%% Test text ----------------------
\usepackage{blindtext} % Generate test text

%%% Usage *************************

% For few/more paragraphs of normal text:
% \blindtext
% \Blindtext

% For a small/large document:
% \blinddocument
% \Blinddocument

% In an arbitrary number of repetitions, e.g.
% \blindtext[5]

% Furthermore,
% \blindlist{env}[x]
% creates a list with “x” being the number of items generated. 
% The environment can be set to itemize, enumerate or description.

% A more direct way to generate lists is by using the commands:
% \blinditemize
% \blindenumerate
% \blinddescription
% and their extended versions with capital letters are available.

% Similarly, the number of items is defined through the optional argument, e.g.
\blindenumerate[10]

% If you want math within the text, use
% \blindmathtrue
% \blindmathfalse
% respectively.

% It is also possible to generate text with math including formulas, using
% \blindmathpaper

%%% *******************************

-----------------------------------
endsnippet
